
1.
***************globalcovid19***************

#!/usr/bin/python

import os, csv
from matplotlib import pyplot as plt
from datetime import datetime

# run shell command to grab current data from Johns Hopkins COVID-19 github repository
os.system('cd COVID-19/; git pull; cd ../')

# iterate through 'Confirmed', 'Recovered', and 'Deaths' data from
# COVID-19
CRD = ['Confirmed', 'Recovered', 'Deaths']

for k in range(3):
	string = CRD[k]
	# initialize path to traverse to desired COVID-19 data file
	path = "//home/pi/ECE331/HW06/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-"
	# dynamically append the path
	path = path + string + ".csv"

	# try to open file
	try:
		fh = open(path, "r")
	except:
		print("Error: Can not open file")

	# return reader object to iterate over lines of csv file
	reader = csv.reader(fh)

	# grab header row from csv file (dates for x-axis)
	header = next(reader)
	# truncate header list to only contain dates
	header = header[4:]

	# initialize an empty list to append numerical data
	data = []

	# iterate over each line of csv file (iterator, 'row', is a list)
	for row in reader:
		# truncate each row to only contain numerical data
		row = row[4:]

		# error check: updated data may not have most recent dates data
		if row[-1] == '':
			row[-1] = '0'

		# convert each value from type string to type int and append 	   
		# nested 'row' list to a 'data[]' list
		data.append([int(val) for val in row])

	# grab length of each row (or the number of days the data represents)
	rowlength = len(data[0])
	# initialize list (size of each row) to contain the cumulative, global data
	# of each day
	datasum = [0] * rowlength

	# iterate through ith elemnent of each row list, cumulatively adding the data.
	# store results in 'datasum[]' list
	for i in range(rowlength):
		for vals in data:
			datasum[i] += vals[i]

	# initialize and  append dates in '%m/%d/%y' format using 'datetime' library
	date = []
	for i in range(len(header)):
		date.append(datetime.strptime(header[i], '%m/%d/%y'))

	# show number of confirmed, recovered, and deaths since most recent date
	print('%s since %s as of %s: ' % (string, date[-2], date[-1])) 
	print(datasum[-1] - datasum[-2])

	# plot confirmed cases, recovered cases, and deaths vs. time
	plt.plot(date, datasum, label = '%s' % string)
	# annotate last point of each graph as a visual aid
	plt.annotate('%s' % datasum[-1], xy = (date[-1], datasum[-1]))

fh.close()
plt.xlabel('Date')
plt.ylabel('Number of People')
plt.title('COVID-19 Data vs. Time')
plt.grid()
plt.legend()
plt.show()



2.
enscript -T 4 -b'ECE 331 Homework 6 %E %*|$%|John Bowen' -O hw06 -o - | ps2pdf - ECE-331-Bowen-John-HW-06.pdf
